@using IntrinsicValue.Blazor.Model
@using IntrinsicValue.Blazor.Services.StateManagement
@inject TickerStateService TickerState


<MudContainer>
    <MudGrid Justify="Justify.FlexEnd">
        <MudIconButton Icon="@Icons.Material.Filled.Close" Edge="Edge.End" Class="mt-2 mr-2 mb-2" OnClick="@CloseDrawer" />
    </MudGrid>
    <MudPaper class="p-2" Elevation="5">
        @if (TickerState.SelectedTicker is not null)
        {
            <MudDrawerHeader class="p-2">
                <MudText Typo="Typo.h6">@($"{TickerState.SelectedTicker.Ticker} Details")</MudText>
            </MudDrawerHeader>
            <MudDrawerContainer class="p-2">
                <MudListItem>
                    <MudText Typo="Typo.subtitle1">@($"Symbol: {TickerState.SelectedTicker.Ticker}")</MudText>
                    <MudText Typo="Typo.subtitle1">@($"Current Price: {TickerState.SelectedTicker.CurrentPrice}")</MudText>
                    <MudText Typo="Typo.subtitle1">@($"P/E: {TickerState.SelectedTicker.PE}")</MudText>
                </MudListItem>
            </MudDrawerContainer>
        }
    </MudPaper>
</MudContainer>


@code {
    private bool _detailsDrawerOpen = false;

    private TickerDto SelectedTicker;

    protected override void OnInitialized()
    {
        TickerState.OnChange += HandleTickerChange;
    }

    private void HandleTickerChange()
    {
        // Ensure this does not indirectly cause `OnChange` to fire again
        _detailsDrawerOpen = true; // This should not trigger another `OnChange`
        StateHasChanged();
    }

    public void Dispose()
    {
        TickerState.OnChange -= StateHasChanged; // Unsubscribe from the event
    }
}

    @code {
    [Parameter] public EventCallback OnCloseRequest { get; set; }

    private async Task CloseDrawer()
    {
        await OnCloseRequest.InvokeAsync();
    }
}