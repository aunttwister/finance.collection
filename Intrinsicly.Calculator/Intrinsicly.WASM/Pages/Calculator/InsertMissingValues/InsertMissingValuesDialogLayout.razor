@using Finance.Collection.Domain.DTOs.Results
@using Financial.Collection.Domain.DTOs
@using System.Globalization
@inject IJSRuntime JSRuntime

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem sm="2"></MudItem>
            <MudItem sm="8">
                <MudForm @ref="form" @bind-IsValid="@isValid" Class="form-container content-center">
                    <MudGrid>
                        <MudItem sm="3">

                        </MudItem>
                        <MudItem sm="3">
                            <MudText Typo="Typo.h6">@Result.TickerDto?.Symbol</MudText>
                        </MudItem>
                        <MudItem sm="3">
                            <MudNumericField @bind-Value="Result.TickerDto.CurrentPrice" Label="Current Price"
                                             Required="true" Min="1" RequiredError="Current Price is required."
                                             HideSpinButtons="true" Culture="@_en" Format="N2"
                                             AdornmentIcon="@Icons.Material.Filled.AttachMoney" Adornment="Adornment.Start"
                                             Class="centered-numeric-field fit-content-numeric-field" />
                        </MudItem>
                        <MudItem sm="3">

                        </MudItem>
                        <MudItem sm="12">
                            <MudTabs PanelClass="px-4 py-6" Elevation="3" ApplyEffectsToContainer="true"
                            Rounded="true" Centered="true">
                                @foreach (var chip in Chips)
                                {
                                    <MudTabPanel Text="@chip.Text">
                                        @if (chip.Text == "Discounted Cash Flow")
                                        {
                                            <InsertMissingValuesDCF Result="Result" Culture="_en" />
                                        }
                                        else if (chip.Text == "Benjamin Graham")
                                        {
                                            <InsertMissingValuesGraham Result="Result" Culture="_en" />
                                        }
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudItem>
            <MudItem sm="2"></MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudContainer Class="mb-4 mr-4">
            <MudGrid>
                <MudItem xs="3" Class="content-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@Cancel">Cancel</MudButton>
                </MudItem>
                <MudItem xs="6"></MudItem>
                <MudItem xs="3" Class="content-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Save">Save</MudButton>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogActions>
</MudDialog>

<style>
    .my-blur-class {
        backdrop-filter: blur(10px);
    }

    .content-center {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .center-text {
        text-align: center;
    }

    .centered-numeric-field {
        text-align: center !important;
    }

    .fit-content-numeric-field .mud-input-underline {
        width: auto !important;
        max-width: 100px !important; /* Adjust as needed */
    }
</style>

@code {
    [CascadingParameter] 
    MudDialogInstance Dialog { get; set; }
    [Parameter]
    public IResultDto Result { get; set; }
    [Parameter]
    public MudChip[] Chips { get; set; }
    private MudForm form;
    private bool isValid = false;
    public CultureInfo _en = CultureInfo.GetCultureInfo("en-US");

    private async Task Save()
    {
        await form.Validate();
        if (form.IsValid)
        {
            Dialog.Close(DialogResult.Ok(Result));
        }
    }

    private void Cancel()
    {
        Dialog.Cancel();
    }
}
