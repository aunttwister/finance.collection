@page "/{**MarkdownPath}"
@using Intrinsicly.WASM.Services.Markdown
@inject MarkdownService _markdownService

<MudContainer Style="overflow-y: hidden;">
    <MudGrid>
        <MudItem sm="2">

        </MudItem>
        <MudItem sm="8">
            @if (isRoadmap)
            {
                <Roadmap DirectoryPath="@currentDirectoryPath" />
            }
            else
            {
                <MarkdownPage MarkdownPath="@MarkdownPath" MarkdownContent="@MarkdownContent" />
            }
        </MudItem>
        <MudItem sm="2">

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string MarkdownPath { get; set; }

    private string MarkdownContent = "";
    private bool isRoadmap = false;
    private string currentDirectoryPath;

    protected override async Task OnInitializedAsync()
    {
        await LoadContentAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadContentAsync();
    }

    private async Task LoadContentAsync()
    {
        await _markdownService.LoadCurrentMarkdownAsync();
        var currentMarkdown = _markdownService.CurrentMarkdown;

        if (currentMarkdown != null && currentMarkdown.UrlPath == MarkdownPath)
        {
            currentDirectoryPath = currentMarkdown.DirectoryPath;

            if (currentMarkdown.DisplayName == "Roadmap")
            {
                isRoadmap = true;
            }
            else
            {
                MarkdownContent = await _markdownService.GetMarkdownContentAsync(currentDirectoryPath);
                if (string.IsNullOrEmpty(MarkdownContent))
                {
                    MarkdownContent = "Markdown information not available.";
                }
                isRoadmap = false;
            }
        }
        else
        {
            MarkdownContent = "Markdown information not available.";
            isRoadmap = false;
        }
    }
}
