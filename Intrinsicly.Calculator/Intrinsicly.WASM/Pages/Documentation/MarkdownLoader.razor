@page "/{**MarkdownPath}"
@using Intrinsicly.WASM.Pages.Documentation.Headings
@using Intrinsicly.WASM.Services.Markdown
@using MudBlazor.Markdown.Extensions.Domain.DTOs
@inject IMarkdownService _markdownService

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="4" xl="3">
            <Headings HeadingsData="Headings"></Headings>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="8" xl="6">
            @if (isRoadmap)
            {
                <Roadmap MarkdownPath="@MarkdownPath" />
            }
            else
            {
                <MarkdownPage MarkdownPath="@MarkdownPath" MarkdownContent="@MarkdownContent" />
            }
        </MudItem>
        <MudItem xs="0" sm="0" md="0" lg="0" xl="3">

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string MarkdownPath { get; set; }

    private string MarkdownContent = "";
    private bool isRoadmap = false;
    private bool _isInitialized = false;
    private List<HeadingDto> Headings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!_isInitialized)
        {
            await LoadContentAsync();
            _isInitialized = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_isInitialized)
        {
            await LoadContentAsync();
        }
    }

    private async Task LoadContentAsync()
    {
        await _markdownService.LoadCurrentMarkdownAsync();
        var currentMarkdown = _markdownService.CurrentMarkdown;

        if (IsCurrentMarkdownValid(currentMarkdown))
        {
            await HandleCurrentMarkdownAsync(currentMarkdown);
        }
        else
        {
            SetMarkdownUnavailable();
        }
    }

    private bool IsCurrentMarkdownValid(MarkdownInfoDto currentMarkdown)
    {
        return currentMarkdown != null && currentMarkdown.UrlPath == MarkdownPath;
    }

    private bool IsDifferentMarkdownUrl(MarkdownInfoDto currentMarkdown)
    {
        return currentMarkdown != null && currentMarkdown.UrlPath != MarkdownPath;
    }

    private void SetMarkdownUnavailable()
    {
        MarkdownContent = "Markdown information not available.";
        isRoadmap = false;
    }

    private async Task<string> GetMarkdownContentAsync(string directoryPath)
    {
        string content = await _markdownService.GetMarkdownContentAsync(directoryPath);
        return string.IsNullOrEmpty(content) ? "Markdown information not available." : content;
    }
}

@code {
    private async Task HandleCurrentMarkdownAsync(MarkdownInfoDto currentMarkdown)
    {
        KeyValuePair<MarkdownInfoDto, string> markdown = await _markdownService.GetMarkdownEntityAsync(MarkdownPath);
        if (!string.IsNullOrEmpty(markdown.Value))
        {
            await _markdownService.SaveCurrentMarkdownAsync(markdown.Key);

            if (markdown.Key.DisplayName == "Roadmap")
            {
                isRoadmap = true;
            }
            else
            {
                MarkdownContent = markdown.Value;
                isRoadmap = false;
            }

            Headings = markdown.Key.Headings;
        }
        else
        {
            SetMarkdownUnavailable();
        }
    }
}