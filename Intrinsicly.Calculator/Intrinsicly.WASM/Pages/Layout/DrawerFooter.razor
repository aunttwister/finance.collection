@using Intrinsicly.WASM.Services.Markdown
@using MudBlazor.Markdown.Extensions.Domain.DTOs
@using static Intrinsicly.WASM.Services.Markdown.MarkdownService
@inherits LayoutComponentBase
@inject MarkdownService _markdownService;

<MudContainer Class="drawer-footer-container">
    <MudGrid Justify="Justify.SpaceBetween">
        @if (MarkdownFiles != null)
        {
            @foreach (var category in MarkdownFiles)
            {
                <MudItem xs="12" sm="@displayInstruction">
                    <div style="display: flex; justify-content: center;">
                        <ul class="footer-list">
                            <li><h4 class="footer-title">@category.Key</h4></li>
                            @foreach (var file in category.Value)
                            {
                                var link = $"/{file.UrlPath}";
                                <li>
                                    <a href="@link" class="footer-link" @onclick="(e) => OpenMarkdownPage(file)">
                                        @file.DisplayName
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                </MudItem>
            }
        }
        else
        {
            <MudText>Loading...</MudText>
        }
    </MudGrid>
</MudContainer>

<style>
    .drawer-footer-container {
        padding: 20px;
        background-color: var(--mud-palette-primary);
        color: white;
    }

    .footer-title {
        font-size: 1rem; /* Smaller font size for titles */
        justify-content:center;
    }

    .footer-list {
        list-style-type: none;
        padding: 0;
        margin: 0;
        justify-content: center;
    }

    .footer-list li {
        margin-bottom: 5px; /* Make list items denser */
    }

    .footer-link {
        color: rgba(255, 255, 255, 0.7); /* Default link color for readability */
        text-decoration: none; /* Remove underline */
        font-size: 0.85rem; /* Smaller font size for links */
    }

    .footer-link:hover {
        color: rgba(255, 255, 255, 1); /* Fully white on hover */
        text-decoration: none; /* Ensure no underline on hover */
    }

    /* Dark mode styles */
    .dark-mode .drawer-footer-container {
        background-color: var(--mud-palette-background-dark);
    }

    .dark-mode .footer-title {
        color: var(--mud-palette-text-primary);
    }

    .dark-mode .footer-link {
        color: var(--mud-palette-text-secondary);
    }

    .dark-mode .footer-link:hover {
        color: var(--mud-palette-text-primary);
    }

    @@media (max-width: 599px) {
        .footer-list {
            width: 132.92px !important; /* Set for mobile */
        }
    }
</style>


@code {
    private Dictionary<string, List<MarkdownInfoDto>> MarkdownFiles;
    private int displayInstruction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MarkdownFiles = await _markdownService.GetCategorizedMarkdownFilesAsync();
        displayInstruction = 12 / MarkdownFiles.Count;
    }

    private async Task OpenMarkdownPage(MarkdownInfoDto markdown)
    {
        await _markdownService.SaveCurrentMarkdownAsync(markdown);
    }
}

@code {
    [Parameter] public bool IsDarkMode { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (IsDarkMode)
        {
            StateHasChanged();
        }
    }
}
